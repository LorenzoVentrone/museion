"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_app_components_floorplan_FloorScene_jsx",{

/***/ "(app-pages-browser)/./src/app/components/floorplan/CircleRoom.jsx":
/*!*****************************************************!*\
  !*** ./src/app/components/floorplan/CircleRoom.jsx ***!
  \*****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CircleRoom)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n// src/components/FloorPlan3D/CircleRoom.jsx\n\nfunction CircleRoom() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n        position: [\n            0,\n            2.5,\n            -35\n        ],\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"cylinderGeometry\", {\n                args: [\n                    15,\n                    15,\n                    5,\n                    64\n                ]\n            }, void 0, false, {\n                fileName: \"/Users/Edoardo/Documents/Sapienza ING_INF/Terzo Anno/TSW/github_pulls/museion/frontend/src/app/components/floorplan/CircleRoom.jsx\",\n                lineNumber: 5,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meshStandardMaterial\", {\n                color: \"#2257a0\"\n            }, void 0, false, {\n                fileName: \"/Users/Edoardo/Documents/Sapienza ING_INF/Terzo Anno/TSW/github_pulls/museion/frontend/src/app/components/floorplan/CircleRoom.jsx\",\n                lineNumber: 6,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/Edoardo/Documents/Sapienza ING_INF/Terzo Anno/TSW/github_pulls/museion/frontend/src/app/components/floorplan/CircleRoom.jsx\",\n        lineNumber: 4,\n        columnNumber: 7\n    }, this);\n}\n_c = CircleRoom;\nvar _c;\n$RefreshReg$(_c, \"CircleRoom\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvY29tcG9uZW50cy9mbG9vcnBsYW4vQ2lyY2xlUm9vbS5qc3giLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBNEM7O0FBQzdCLFNBQVNBO0lBQ3BCLHFCQUNFLDhEQUFDQztRQUFLQyxVQUFVO1lBQUM7WUFBRztZQUFLLENBQUM7U0FBRzs7MEJBQzNCLDhEQUFDQztnQkFBaUJDLE1BQU07b0JBQUM7b0JBQUk7b0JBQUk7b0JBQUc7aUJBQUc7Ozs7OzswQkFDdkMsOERBQUNDO2dCQUFxQkMsT0FBTTs7Ozs7Ozs7Ozs7O0FBR2xDO0tBUHNCTiIsInNvdXJjZXMiOlsiL1VzZXJzL0Vkb2FyZG8vRG9jdW1lbnRzL1NhcGllbnphIElOR19JTkYvVGVyem8gQW5uby9UU1cvZ2l0aHViX3B1bGxzL211c2Vpb24vZnJvbnRlbmQvc3JjL2FwcC9jb21wb25lbnRzL2Zsb29ycGxhbi9DaXJjbGVSb29tLmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy9GbG9vclBsYW4zRC9DaXJjbGVSb29tLmpzeFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ2lyY2xlUm9vbSgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPG1lc2ggcG9zaXRpb249e1swLCAyLjUsIC0zNV19PlxuICAgICAgICA8Y3lsaW5kZXJHZW9tZXRyeSBhcmdzPXtbMTUsIDE1LCA1LCA2NF19IC8+XG4gICAgICAgIDxtZXNoU3RhbmRhcmRNYXRlcmlhbCBjb2xvcj1cIiMyMjU3YTBcIiAvPlxuICAgICAgPC9tZXNoPlxuICAgICk7XG4gIH0iXSwibmFtZXMiOlsiQ2lyY2xlUm9vbSIsIm1lc2giLCJwb3NpdGlvbiIsImN5bGluZGVyR2VvbWV0cnkiLCJhcmdzIiwibWVzaFN0YW5kYXJkTWF0ZXJpYWwiLCJjb2xvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/components/floorplan/CircleRoom.jsx\n"));

/***/ })

});